import os
from waflib.extras.layout import Product, Component

def name(context):
    return os.path.basename(str(context.path))

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    buildCtx.program(
	    name='exe_bitwise_trie_test',
	    source=[buildCtx.path.find_node('bitwise_trie_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'bitwise_trie_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_concurrent_vector_test',
	    source=[buildCtx.path.find_node('concurrent_vector_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'concurrent_vector_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_concurrent_list_test',
	    source=[buildCtx.path.find_node('concurrent_list_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'concurrent_list_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_emplacing_list_test',
	    source=[buildCtx.path.find_node('emplacing_list_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'emplacing_list_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_emplacing_skiplist_test',
	    source=[buildCtx.path.find_node('emplacing_skiplist_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'emplacing_skiplist_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_spsc_ring_queue_test',
	    source=[buildCtx.path.find_node('spsc_ring_queue_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'spsc_ring_queue_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_mpmc_ring_queue_test',
	    source=[buildCtx.path.find_node('mpmc_ring_queue_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'mpmc_ring_queue_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_trie_key_test',
	    source=[buildCtx.path.find_node('trie_key_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'trie_key_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_trie_prefix_test',
	    source=[buildCtx.path.find_node('trie_prefix_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'trie_prefix_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST', 'shlib_turbo_algorithm', 'shlib_turbo_memory'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
