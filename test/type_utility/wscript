import os
from waflib.extras.layout import Product, Component

def name(context):
    return os.path.basename(str(context.path))

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    buildCtx.program(
	    name='exe_enum_iterator_test',
	    source=[buildCtx.path.find_node('enum_iterator_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'enum_iterator_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST_STLIB', 'shlib_turbo_algorithm', 'shlib_turbo_filesystem'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
    buildCtx.program(
	    name='exe_has_member_test',
	    source=[buildCtx.path.find_node('has_member_test.cxx')],
	    target=os.path.join(buildCtx.env.component.build_tree.testPathFromBuild(buildCtx), 'has_member_test'),
	    defines=['GTEST_HAS_PTHREAD=1'],
	    includes=['.'] + buildCtx.env.component.include_path_list,
	    cxxflags=buildCtx.env.CXXFLAGS,
	    linkflags=buildCtx.env.LDFLAGS,
	    use=['GTEST_STLIB'],
	    libpath=['.'] + buildCtx.env.component.lib_path_list,
	    rpath=buildCtx.env.component.rpath_list,
	    install_path=None)
