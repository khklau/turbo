import os
from waflib.extras.layout import Product, Component

publicHeaders = [
    'bitwise_trie.hpp',
    'bitwise_trie.hxx',
    'concurrent_list.hpp',
    'concurrent_list.hxx',
    'concurrent_vector.hpp',
    'concurrent_vector.hxx',
    'emplacing_list.hpp',
    'emplacing_list.hxx',
    'emplacing_skiplist.hpp',
    'emplacing_skiplist.hxx',
    'mpmc_ring_queue.hpp',
    'mpmc_ring_queue.hxx',
    'spsc_ring_queue.hpp',
    'spsc_ring_queue.hxx']

def name(context):
    return os.path.basename(str(context.path))

def configure(confCtx):
    confCtx.env.component = Component.fromContext(confCtx, name(confCtx), confCtx.env.product)
    confCtx.env.product.addComponent(confCtx.env.component)

def build(buildCtx):
    buildCtx.env.component = buildCtx.env.product.getComponent(name(buildCtx))
    publishTaskList=[]
    for header in publicHeaders:
	publishTask='publish_%s' % header
	buildCtx(
		name=publishTask,
		rule='cp ${SRC} ${TGT}',
		source=header,
		target=os.path.join(buildCtx.env.component.build_tree.includePathFromBuild(buildCtx), header),
		install_path=os.path.join(buildCtx.env.component.install_tree.include, os.path.dirname(header)))
	publishTaskList.append(publishTask)
